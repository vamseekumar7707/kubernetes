# GRAFANA
# grafana-datasource-config.yaml  

apiVersion: v1  
kind: ConfigMap  
metadata:  
  name: grafana-datasources  
  namespace: monitoring  
data:  
  prometheus.yaml: |-  
    {  
        "apiVersion": 1,  
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus-service.monitoring.svc:8080",
                "version": 1
            }
        ]
    }
    
    
#  service.yml  

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '3000'
spec:
  selector: 
    app: grafana
  type: NodePort  
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 32000
      
#  Deployment 


apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - name: grafana
          containerPort: 3000
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests: 
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: false
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
              defaultMode: 420
              name: grafana-datasources


#COMMANDS

kubectl autoscal frontend-deploy --min=1 --max=5 --cpu-percent=50  

git clone https://github.com/bibinwilson/kubernetes-prometheus  
kubectl create namespace monitoring  

kubectl create -f clusterRole.yaml  
kubectl create -f config-map.yaml  

kubectl create  -f prometheus-deployment.yaml  
kubectl get deployments --namespace=monitoring  

kubectl get pods --namespace=monitoring  
kubectl create -f prometheus-service.yaml --namespace=monitoring

vi grafana-datasource-config.yaml
https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/

https://devopscube.com/setup-grafana-kubernetes/


# REFERENCES

https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/
https://devopscube.com/setup-grafana-kubernetes/
https://grafana.com/grafana/dashboards/8588



